name: TerraFusion CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: terrafusion_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/terrafusion_test
  
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
        tags: |
          terrafusionpro/api:latest
          terrafusionpro/api:${{ github.sha }}
        cache-from: type=registry,ref=terrafusionpro/api:latest
        cache-to: type=inline
  
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up Kubernetes config
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" > ~/.kube/config
    
    - name: Deploy to staging
      run: |
        kubectl apply -f kubernetes/staging/namespace.yml
        kubectl apply -f kubernetes/staging/configmap.yml
        kubectl apply -f kubernetes/staging/secrets.yml
        kubectl set image deployment/terrafusion-api terrafusion-api=terrafusionpro/api:${{ github.sha }} -n terrafusion-staging
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/terrafusion-api -n terrafusion-staging
  
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    
    - name: Set up Kubernetes config
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" > ~/.kube/config
    
    - name: Deploy to production
      run: |
        kubectl apply -f kubernetes/production/namespace.yml
        kubectl apply -f kubernetes/production/configmap.yml
        kubectl apply -f kubernetes/production/secrets.yml
        kubectl set image deployment/terrafusion-api terrafusion-api=terrafusionpro/api:${{ github.sha }} -n terrafusion-production
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/terrafusion-api -n terrafusion-production